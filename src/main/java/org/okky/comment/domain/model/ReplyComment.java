package org.okky.comment.domain.model;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.okky.share.domain.Aggregate;

import java.util.UUID;

import static java.lang.String.format;
import static lombok.AccessLevel.PRIVATE;
import static lombok.AccessLevel.PUBLIC;
import static org.okky.share.domain.AssertionConcern.assertArgLength;
import static org.okky.share.domain.AssertionConcern.assertArgNotNull;
import static org.okky.share.util.JsonUtil.toPrettyJson;

@NoArgsConstructor(access = PUBLIC)
@EqualsAndHashCode(of = "id", callSuper = false)
@FieldDefaults(level = PRIVATE)
@Getter
@DynamoDBTable(tableName = "ReplyComment")
public class ReplyComment implements Aggregate {
    @DynamoDBHashKey
    String id;

    @DynamoDBIndexHashKey(globalSecondaryIndexName = "replyId-commentedOn-index")
    String replyId;

    String body;

    String commenterId;

    String commenterName;

    @DynamoDBAutoGeneratedTimestamp
    @DynamoDBIndexRangeKey(globalSecondaryIndexName = "replyId-commentedOn-index")
    long commentedOn;

    Long updatedOn;

    public ReplyComment(String replyId, String body, String commenterId, String commenterName) {
        setId("rc-" + UUID.randomUUID().toString().replaceAll("-", "").substring(0, 15));
        setReplyId(replyId);
        setBody(body);
        setCommenterId(commenterId);
        setCommenterName(commenterName);
    }

    public static ReplyComment sample() {
        String articleId = "a03";
        String body = "잘 키운 딸 하나가 아주 큰일 해내네요...";
        String replierId = "m-334455";
        String replierName = "coding8282";
        return new ReplyComment(articleId, body, replierId, replierName);
    }

    public static void main(String[] args) {
        System.out.println(toPrettyJson(sample()));
    }

    public void modify(String body) {
        setBody(body);
    }

    // ---------------------------------

    public void setId(String id) {
        assertArgNotNull(id, "id는 필수입니다.");
        this.id = id;
    }

    public void setReplyId(String replyId) {
        assertArgNotNull(replyId, "답글 id는 필수입니다.");
        this.replyId = replyId;
    }

    public void setBody(String body) {
        String trimed = body.trim();
        assertArgLength(trimed, 2, 150, format("코멘트는 %d~%d자까지 가능합니다.", 2, 150));
        this.body = trimed;
    }

    public void setCommenterId(String commenterId) {
        assertArgNotNull(commenterId, "코멘터 id는 필수입니다.");
        this.commenterId = commenterId;
    }

    public void setCommenterName(String commenterName) {
        assertArgNotNull(commenterName, "코멘터 이름은 필수입니다.");
        this.commenterName = commenterName;
    }

    public void setCommentedOn(long commentedOn) {
        this.commentedOn = commentedOn;
    }

    public void setUpdatedOn(Long updatedOn) {
        this.updatedOn = updatedOn;
    }
}
